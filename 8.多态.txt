假设一个人叫张三，他是学生，他也是人 ，他就拥有两种形态，学生（Student）和人（Person），这两种形态是有继承关系的，这就是多态。

多态是继封装、继承之后，面向对象的第三大特性。
现实事物经常会体现出多种形态，如学生，学生是人的一种，则一个具体的同学张三既是学生也是人，即出现两种形态。


Java作为面向对象的语言，同样可以描述一个事物的多种形态。如Student类继承了Person类，一个Student的对象便既是Student，又是Person。
Java中多态的代码体现在一个子类对象(实现类对象)既可以给这个子类(实现类对象)引用变量赋值，又可以给这个子类(实现类对象)的父类(接口)变量赋值。
如Student类可以为Person类的子类。那么一个Student对象既可以赋值给一个Student类型的引用，也可以赋值给一个Person类型的引用。
最终多态体现为父类引用变量可以指向子类对象。
多态的前提是必须有子父类关系或者类实现接口关系，否则无法完成多态。
在使用多态后的父类引用变量调用方法时，会调用子类重写后的方法。

多态的定义与使用格式：
	多态的定义格式：就是父类的引用变量指向子类对象（父类----->子类）
	父类类型 变量名 = new 子类类型（）； //  父类----->子类
如： class Fu {

	}

    class Zi extends Fu {

	}

public class Test {
	public static void main(String[] args) {	
		Fu f = new Zi();  //父类类型 变量名 = new 子类类型（）
	}

}


多态首先是建立在继承的基础上的，先有继承才能有多态。
多态是指不同的子类在继承父类后分别都重写覆盖了父类的方法，即父类同一个方法，在继承的子类中表现出不同的形式。
多态成立的另一个条件是在创建子类时候必须使用父类new子类的方式。



多态注意事项：

1.子类对象可以直接赋给父类引用，但
父类对象在任何情况下都不能直接赋给子类引用，因为子类是父类的一种，但父类不是子类的一种，或者讲“子类可以当作父类看待，但父类不能当作子类看待”，“狗可以当作动物看待，但动物不能当作狗看待”

2.通过父类引用只能访问子类对象从父类继承过来的成员

3.通过父类引用不能访问子类对象所特有的成员

4.父类引用永远不能直接赋给子类引用
	只有在父类引用本身指向的就是一个子类对象时，才可以把父类引用强制转化为子类引用
