try{
	//可能会抛出异常的语句
}
catch(Exception e){ //e用来接收抛出的异常
	e.printStackTrace(); //可以简单理解为 输出该异常的具体信息
}

throw用来抛出异常
格式：
	throw new 异常名（参数）； //此处抛出的是一个对象
假设F方法抛出了A异常，则F方法有两种方法来处理A异常
1. throws   A
	谁调用F方法，谁处理A异常，F方法本身不处理A异常
2.try{
	//可能出错的代码
}catch(Exception e){
	e.printStackTrace("异常！"+e);
}
finally{
	//无论是否捕捉到异常都必须处理的代码（finally为异常处理提供一个统一的出口，使得在控制流程转到程序的其他部分之前，对程序的状态做统一的管理，通常在finally语句中可以进行资源的清除工作，如关闭打开的文件，删除临时文件等）
}


注意问题：
1.所有的catch只能有一个被执行
2.有可能所有的catch都没有执行
3.先catch子类异常再catch父类异常（如果先catch父类异常再catch子类异常，则编译会报错）
4.catch和catch之间是不能有其他代码的
5.重写方法抛出的异常的范围不能大于被重写方法的范围